// This optional code is used to register the service worker generated by Vite PWA plugin
import { registerSW } from 'virtual:pwa-register';

// Detect if the client is a mobile device
const isMobileDevice = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};

// Detect if the app is running in standalone mode
const isStandaloneMode = (): boolean => {
  return window.matchMedia('(display-mode: standalone)').matches || 
         (window.navigator as any).standalone === true;
};

type Config = {
  onSuccess?: () => void;
  onUpdate?: () => void;
  onOffline?: () => void;
  onOnline?: () => void;
};

export function register(config?: Config): void {
  if (import.meta.env.PROD && 'serviceWorker' in navigator) {
    // Register the service worker using Vite's PWA plugin
    const updateSW = registerSW({
      onNeedRefresh() {
        console.log('[SW] New content available, updating...');
        
        // For mobile or standalone mode, automatically update
        if (isMobileDevice() || isStandaloneMode()) {
          console.log('[SW] Mobile or standalone mode detected, applying update automatically');
          updateSW(true);
          return;
        }
        
        // For desktop, notify the user
        if (config?.onUpdate) {
          config.onUpdate();
        }
      },
      onOfflineReady() {
        console.log('[SW] App is ready for offline use');
        if (config?.onSuccess) {
          config.onSuccess();
        }
      },
      onRegisteredSW(swUrl, registration) {
        console.log(`[SW] Service worker registered at: ${swUrl}`);
        
        // Set up online/offline event listeners
        window.addEventListener('online', () => {
          if (config?.onOnline) {
            config.onOnline();
          }
        });

        window.addEventListener('offline', () => {
          if (config?.onOffline) {
            config.onOffline();
          }
        });

        // Set update check interval based on device type
        const updateInterval = isMobileDevice() || isStandaloneMode() 
          ? 5 * 60 * 1000  // 5 minutes for mobile or standalone
          : 30 * 60 * 1000; // 30 minutes for desktop
        
        // Periodically check for updates
        setInterval(() => {
          if (typeof navigator.onLine === 'boolean' && navigator.onLine) {
            console.log('[SW] Checking for updates...');
            updateSW(false); // false means don't force refresh
          }
        }, updateInterval);
      }
    });

    // Expose update function to window
    window.checkForUpdates = async () => {
      console.log('[SW] Manually checking for updates');
      const updated = await updateSW(false);
      return updated;
    };

    // Expose force refresh function to window
    window.forceClearCache = () => {
      console.log('[SW] Forcing cache refresh and update');
      updateSW(true);
    };

    // Handle post-login cache clearing for mobile
    window.clearCacheAfterLogin = async () => {
      console.log('[SW] Clearing cache after login');
      if ('caches' in window) {
        try {
          const cacheKeys = await caches.keys();
          await Promise.all(cacheKeys.map(key => caches.delete(key)));
          console.log('[SW] Caches cleared after login');
        } catch (err) {
          console.error('[SW] Error clearing caches:', err);
        }
      }
      return true;
    };

    // Notify about standalone mode
    if (isStandaloneMode()) {
      console.log('[SW] Running in standalone mode');
    }
  }
}

export function checkForUpdates(): Promise<boolean> {
  if (typeof window.checkForUpdates === 'function') {
    return window.checkForUpdates();
  }
  return Promise.resolve(false);
}

export function forceClearCacheAndReload(): void {
  if (typeof window.forceClearCache === 'function') {
    window.forceClearCache();
  } else {
    window.location.reload();
  }
}

export function unregister(): void {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

// Add types for our global functions
declare global {
  interface Window {
    checkForUpdates: () => Promise<boolean>;
    forceClearCache: () => void;
    clearCacheAfterLogin: () => Promise<boolean>;
  }
} 