name: Deploy Frontend Only

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.dockerignore'
  repository_dispatch:
    types: [frontend-deploy-only]
  workflow_dispatch:
    inputs:
      frontend_ref:
        description: 'Frontend branch/commit to deploy'
        required: true
        default: 'main'

permissions:
  contents: read
  actions: read

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout frontend code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --watchAll=false

    - name: Build frontend
      run: npm run build

  deploy-frontend:
    name: Deploy Frontend Only
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: production
      url: https://${{ vars.PRODUCTION_DOMAIN || 'your-domain.com' }}

    steps:
    - name: Deploy frontend to production server
      if: vars.DEPLOY_HOST != ''
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.DEPLOY_HOST }}
        username: ${{ vars.DEPLOY_USER }}
        key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
        port: ${{ vars.DEPLOY_PORT || '22' }}
        script: |
          # Navigate to frontend directory and pull latest code
          cd ${{ vars.FRONTEND_DEPLOY_PATH || '/home/deployer/subul-fe' }}
          echo "üì• Pulling latest frontend code..."
          git fetch origin
          
          # Determine which branch to checkout
          FRONTEND_BRANCH="${{ github.event.client_payload.ref || github.event.inputs.frontend_ref || github.ref_name || 'main' }}"
          echo "üîÄ Checking out branch: $FRONTEND_BRANCH"
          git checkout $FRONTEND_BRANCH
          git pull origin $FRONTEND_BRANCH
          
          # Navigate to backend directory for docker compose
          cd /home/deployer/subul-be
          
          # BACKUP CURRENT FRONTEND IMAGE
          echo "üíæ Backing up current frontend image..."
          if docker image inspect subul-fe:latest >/dev/null 2>&1; then
            docker tag subul-fe:latest subul-fe:backup
            echo "‚úÖ Frontend image backed up as subul-fe:backup"
          fi
          
          # BUILD FRONTEND
          echo "üèóÔ∏è Building frontend with docker compose..."
          docker compose -f docker-compose.unified.yml build subul-frontend || exit 1
          
          # DEPLOY FRONTEND (no nginx restart needed)
          echo "üöÄ Deploying frontend only..."
          docker stop subul-fe || true
          docker rm subul-fe || true
          
          echo "üöÄ Starting frontend..."
          docker compose -f docker-compose.unified.yml up -d --no-build subul-frontend
          
   
          # FRONTEND HEALTH CHECK
          FRONTEND_OK=false
          echo "üîç Checking frontend health via nginx proxy..."
          for i in {1..10}; do
            if docker ps | grep -q "subul-fe" && curl -f -s -k https://localhost >/dev/null 2>&1; then
              echo "‚úÖ Frontend is responding via nginx"
              FRONTEND_OK=true
              break
            fi
            echo "‚è≥ Frontend check attempt $i/10..."
            sleep 5
          done
          
          # FINAL STATUS
          if [ "$FRONTEND_OK" = true ]; then
            echo "‚úÖ Frontend deployment successful!"
            echo "‚è±Ô∏è  Frontend deployment - downtime: ~15-30 seconds"
            # Clean up backup image
            docker rmi subul-fe:backup 2>/dev/null || true
            docker image prune -f
          else
            echo "‚ùå Frontend deployment failed - rolling back"
            docker compose -f docker-compose.unified.yml logs subul-frontend --tail=20
            
            # ROLLBACK FRONTEND
            echo "üîÑ Rolling back frontend..."
            docker stop subul-fe || true
            docker rm subul-fe || true
            
            # Restore backup image if it exists
            if docker image inspect subul-fe:backup >/dev/null 2>&1; then
              docker tag subul-fe:backup subul-fe:latest
              echo "‚úÖ Frontend image restored from backup"
              
              # Restart frontend with restored image
              docker compose -f docker-compose.unified.yml up -d --no-build subul-frontend
              sleep 10
              
              # Verify rollback worked
              if curl -f -s -k https://localhost >/dev/null 2>&1; then
                echo "‚úÖ Frontend rollback successful"
              else
                echo "‚ùå Frontend rollback failed - manual intervention required"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è No frontend backup image found, cannot rollback"
              exit 1
            fi
            
            exit 1
          fi

    - name: Deploy locally (for testing)
      if: vars.DEPLOY_HOST == ''
      run: |
        echo "üöÄ Deploying frontend locally for testing..."
        echo "Frontend ref: ${{ github.event.client_payload.ref || github.event.inputs.frontend_ref || github.ref_name || 'main' }}"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "This would deploy frontend only locally"
        echo ""
        echo "To deploy to production server, configure these variables:"
        echo "- DEPLOY_HOST: Production server IP/domain"
        echo "- DEPLOY_USER: SSH username"
        echo "- DEPLOY_PORT: SSH port (default: 22)"
        echo "- FRONTEND_DEPLOY_PATH: Frontend repo path (default: /home/deployer/subul-fe)"
        echo "- BACKEND_DEPLOY_PATH: Backend repo path (default: /home/deployer/subul-be)"
        echo "- PRODUCTION_DOMAIN: Your production domain"
        echo ""
        echo "And these secrets:"
        echo "- PROD_SSH_PRIVATE_KEY: SSH private key for deployment" 